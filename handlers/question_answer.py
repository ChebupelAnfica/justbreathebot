from aiogram import F, types

import keyboards.inline.questions

from loader import dp, bot
from aiogram.fsm.context import FSMContext
import logging


@dp.message(F.text == "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ãüß†")
async def question(message: types.Message):
    try:
        await bot.delete_message(message.from_user.id, message.message_id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        await message.answer(f"""–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö""",
                             reply_markup=keyboards.inline.questions.questions)
    except Exception as ex:
        logging.error(ex)
        pass


@dp.callback_query(F.data == 'questions1')
async def process_callback1(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        if call.message:
            await bot.edit_message_text(text=f'''–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å?

–ü–æ–¥–æ–π–¥–µ—Ç –Ω–æ–≤–∏—á–∫–∞–º –∏ –æ–ø—ã—Ç–Ω—ã–º! –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–≤–µ—Ä—å—Ç–µ, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ.''',
                                        chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboards.inline.questions.back_to_questions)
    except Exception as ex:
        logging.error(ex)
        pass


@dp.callback_query(F.data == 'questions2')
async def process_callback2(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        if call.message:
            await bot.edit_message_text(text=f'''–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?

‚ñ´Ô∏è1 –º–µ—Å—è—Ü 130BYN/40$
‚ñ´Ô∏è3 –º–µ—Å—è—Ü–∞ 275 BYN/85$
‚ñ´Ô∏è6 –º–µ—Å—è—Ü–µ–≤ 535 BYN/165$''', chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboards.inline.questions.back_to_questions)
    except Exception as ex:
        logging.error(ex)


@dp.callback_query(F.data == 'questions3')
async def process_callback3(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        if call.message:
            await bot.edit_message_text(text=f'''–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?

<b>–í –∫–ª—É–±–µ –º–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –Ω–æ –≤—Å–µ-—Ç–∞–∫–∏ —Å—Ç–æ–∏—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:</b> –ø–µ–Ω–Ω—ã–π —Ä–æ–ª–ª, 2 —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º—è—á–∞, –º—è—á –¥–ª—è –ø–∏–ª–∞—Ç–µ—Å–∞ 25-30 —Å–º, —Ñ–∏—Ç–Ω–µ—Å –ª–µ–Ω—Ç–∞ –¥–ª—è –ø–∏–ª–∞—Ç–µ—Å–∞, —Ñ–∏—Ç–Ω–µ—Å 
—Ä–µ–∑–∏–Ω–∫–∏, –≥–∞–Ω—Ç–µ–ª–∏ 2 –∫–≥.

<u>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</u> –∑–∞–Ω—è—Ç–∏—è –∏–¥—É—Ç –Ω–µ –±–æ–ª–µ–µ 45 –º–∏–Ω—É—Ç, –µ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ 15-20 –º–∏–Ω—É—Ç.''',
                                        chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboards.inline.questions.back_to_questions)
    except Exception as ex:
        logging.error(ex)


@dp.callback_query(F.data == 'questions4')
async def process_callback4(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        if call.message:
            await bot.edit_message_text(text=f'''–ö–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ?

–í –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å —Ö—ç—à—Ç–µ–≥–∏ (¬´—Ä—É–∫–∏¬ª,¬´–Ω–æ–≥–∏¬ª –∏ —Ç.–¥.), —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ, –≥–¥–µ —è –µ—â–µ —Ä–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é. –í—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ—Å—å.''',
                                        chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboards.inline.questions.back_to_questions)
    except Exception as ex:
        logging.error(ex)


@dp.callback_query(F.data == 'questions5')
async def process_callback5(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        if call.message:
            await bot.edit_message_text(text=f'''–ß—Ç–æ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ?

–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä–æ–≤–æ–∂—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –∏ –≤—ã –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏, –∫–æ–≥–¥–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å –≤ –∑–∞–ø–∏—Å–∏‚ù§Ô∏è
''',
                                        chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboards.inline.questions.back_to_questions)
    except Exception as ex:
        logging.error(ex)


@dp.callback_query(F.data == 'back_to_all_questions')
async def process_back(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await bot.answer_callback_query(call.id)
    except Exception as ex:
        logging.error(ex)
        pass
    try:
        await bot.edit_message_text(f"–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=keyboards.inline.questions.questions)
    except Exception as ex:
        logging.error(ex)
